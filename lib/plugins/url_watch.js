// Generated by CoffeeScript 1.6.2
(function() {
  var ACCEPTABLE_MIMES, Plugin, STATUS_CODES, TITLE_REGEX, UrlDetector, UrlFetcher, bytesToSize,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UrlFetcher = require('../url_fetcher');

  UrlDetector = require('../url_detector');

  ACCEPTABLE_MIMES = /(text|html|xml)/;

  TITLE_REGEX = /<title>(.*?)<\/title>/;

  STATUS_CODES = {
    "200": "200 OK",
    "301": "301 Moved Permanently",
    "302": "302 Found",
    "307": "307 Temporary Redirect",
    "308": "308 Permanent Redirect",
    "401": "401 Unauthorized",
    "403": "403 Forbidden",
    "404": "404 Not Found",
    "405": "405 Method Not Allowed",
    "420": "420 Rate Limited",
    "422": "422 Unprocessable Entity",
    "500": "500 Internal Server Error",
    "502": "502 Bad Gateway",
    "503": "503 Service Unavailable",
    "504": "504 Gateway Timeout",
    "509": "509 Bandwidth Limit Exceeded"
  };

  bytesToSize = function(bytes) {
    var i, sizes;

    sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) {
      return 'n/a';
    }
    i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[[i]];
  };

  Plugin = (function() {
    function Plugin(bot, config) {
      this.bot = bot;
      this.config = config;
      this.urlDetails = __bind(this.urlDetails, this);
      this.teardown = __bind(this.teardown, this);
      this.setup = __bind(this.setup, this);
      this.__name = "url_watch";
      this.__author = "epochwolf";
      this.__version = "v0.0.1";
      this.__listeners = {
        "message_with_url": [this.urlDetails]
      };
      this.__commands = {};
      this.__autoload = true;
      this.rate_limiter = new (require('../rate_limiter'))(30 * 60);
    }

    Plugin.prototype.setup = function() {
      return console.log("url_watch plugin loaded");
    };

    Plugin.prototype.teardown = function() {
      return console.log("url_watch plugin unloaded");
    };

    Plugin.prototype.urlDetails = function(channel, who, message, url) {
      var request,
        _this = this;

      if (!this.rate_limiter.okay(url.url)) {
        return;
      }
      request = new UrlFetcher(url).handle(function(res) {
        var content_type, data, length, location, new_location, status_code;

        status_code = res.statusCode;
        console.log(res.headers);
        location = res.headers["location"];
        new_location = res.req._headers.host + res.req.path;
        content_type = res.headers['content-type'];
        content_type = ("" + content_type).replace(/;.*/, "");
        length = res.headers['content-length'];
        data = "";
        res.on('end', function() {
          var display_status, title, title_text;

          display_status = STATUS_CODES["" + status_code] || status_code;
          title = ("" + content_type).match(ACCEPTABLE_MIMES) ? ("" + data).match(TITLE_REGEX) : void 0;
          title_text = location ? location : title && title[1] ? ("" + title[1]).replace(/&amp;/, "&") : length ? "" + (bytesToSize(length)) + " " + content_type : "?? KB " + content_type;
          if (new_location) {
            title_text += " | " + new_location;
          }
          if (("" + status_code) !== "200") {
            title_text += " (" + display_status + ")";
          }
          return _this.bot.say(channel, "Web | " + title_text);
        });
        return res.on('data', function(d) {
          data += d;
          if (data.length > 40000) {
            return res.socket.end();
          }
        });
      });
      request.end();
      return request.on('error', function(e) {
        return console.error(e);
      });
    };

    return Plugin;

  })();

  module.exports = Plugin;

}).call(this);
